<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pygame on Martin MeRu</title><link>https://meruman.github.io/tags/pygame/</link><description>Recent content in Pygame on Martin MeRu</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 22 Feb 2023 10:58:43 +0100</lastBuildDate><atom:link href="https://meruman.github.io/tags/pygame/index.xml" rel="self" type="application/rss+xml"/><item><title>Alien ranger in Pygame with Stable diffusion</title><link>https://meruman.github.io/posts/8.-alien_ranger/</link><pubDate>Wed, 22 Feb 2023 10:58:43 +0100</pubDate><guid>https://meruman.github.io/posts/8.-alien_ranger/</guid><description>Description: In this project, I created a population manager in Unity using genetic algorithms to navigate a maze. The project involved setting up a population of bots, breeding them, and evaluating their fitness in order to evolve a population that can successfully navigate a maze.
Key Learnings: Creating a population manager in Unity using genetic algorithms Implementing fitness functions in genetic algorithms Managing data structures using lists in C# Applying good coding practices, such as commenting and using informative variable names Testing and experimenting with different parameters to fine-tune the genetic algorithm and improve the quality of the solutions it generates.</description></item><item><title>Catch the lion in Pygame</title><link>https://meruman.github.io/posts/6.-catch_the_lion/</link><pubDate>Wed, 22 Feb 2023 10:58:43 +0100</pubDate><guid>https://meruman.github.io/posts/6.-catch_the_lion/</guid><description>Description: In this project, I created a population manager in Unity using genetic algorithms to navigate a maze. The project involved setting up a population of bots, breeding them, and evaluating their fitness in order to evolve a population that can successfully navigate a maze.
Key Learnings: Creating a population manager in Unity using genetic algorithms Implementing fitness functions in genetic algorithms Managing data structures using lists in C# Applying good coding practices, such as commenting and using informative variable names Testing and experimenting with different parameters to fine-tune the genetic algorithm and improve the quality of the solutions it generates.</description></item><item><title>Creating Alien ranger with Stable diffusion</title><link>https://meruman.github.io/posts/8.-alien_ranger_blog/</link><pubDate>Wed, 22 Feb 2023 10:58:43 +0100</pubDate><guid>https://meruman.github.io/posts/8.-alien_ranger_blog/</guid><description>Description: Key Learnings: Tools and Technologies Used: Outcome: Future Improvements: Description: In this project, I created a population manager in Unity using genetic algorithms to navigate a maze. The project involved setting up a population of bots, breeding them, and evaluating their fitness in order to evolve a population that can successfully navigate a maze.
Key Learnings: Creating a population manager in Unity using genetic algorithms Implementing fitness functions in genetic algorithms Managing data structures using lists in C# Applying good coding practices, such as commenting and using informative variable names Testing and experimenting with different parameters to fine-tune the genetic algorithm and improve the quality of the solutions it generates.</description></item><item><title>Creating catch the lion</title><link>https://meruman.github.io/posts/6.-catch_the_lion_blog/</link><pubDate>Wed, 22 Feb 2023 10:58:43 +0100</pubDate><guid>https://meruman.github.io/posts/6.-catch_the_lion_blog/</guid><description>Description: Key Learnings: Tools and Technologies Used: Outcome: Future Improvements: Description: In this project, I created a population manager in Unity using genetic algorithms to navigate a maze. The project involved setting up a population of bots, breeding them, and evaluating their fitness in order to evolve a population that can successfully navigate a maze.
Key Learnings: Creating a population manager in Unity using genetic algorithms Implementing fitness functions in genetic algorithms Managing data structures using lists in C# Applying good coding practices, such as commenting and using informative variable names Testing and experimenting with different parameters to fine-tune the genetic algorithm and improve the quality of the solutions it generates.</description></item><item><title>Creating sea monsters assault</title><link>https://meruman.github.io/posts/7.-sea_monsters_assault_blog/</link><pubDate>Wed, 22 Feb 2023 10:58:43 +0100</pubDate><guid>https://meruman.github.io/posts/7.-sea_monsters_assault_blog/</guid><description>Description: Key Learnings: Tools and Technologies Used: Outcome: Future Improvements: Description: In this project, I created a population manager in Unity using genetic algorithms to navigate a maze. The project involved setting up a population of bots, breeding them, and evaluating their fitness in order to evolve a population that can successfully navigate a maze.
Key Learnings: Creating a population manager in Unity using genetic algorithms Implementing fitness functions in genetic algorithms Managing data structures using lists in C# Applying good coding practices, such as commenting and using informative variable names Testing and experimenting with different parameters to fine-tune the genetic algorithm and improve the quality of the solutions it generates.</description></item><item><title>Sea monsters assault in Pygame</title><link>https://meruman.github.io/posts/7.-sea_monsters_assault/</link><pubDate>Wed, 22 Feb 2023 10:58:43 +0100</pubDate><guid>https://meruman.github.io/posts/7.-sea_monsters_assault/</guid><description>Description: In this project, I created a population manager in Unity using genetic algorithms to navigate a maze. The project involved setting up a population of bots, breeding them, and evaluating their fitness in order to evolve a population that can successfully navigate a maze.
Key Learnings: Creating a population manager in Unity using genetic algorithms Implementing fitness functions in genetic algorithms Managing data structures using lists in C# Applying good coding practices, such as commenting and using informative variable names Testing and experimenting with different parameters to fine-tune the genetic algorithm and improve the quality of the solutions it generates.</description></item></channel></rss>