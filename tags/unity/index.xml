<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>unity on Martin MeRu</title><link>https://meruman.github.io/tags/unity/</link><description>Recent content in unity on Martin MeRu</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 22 Feb 2023 10:58:43 +0100</lastBuildDate><atom:link href="https://meruman.github.io/tags/unity/index.xml" rel="self" type="application/rss+xml"/><item><title>Alien invasion in unity with Stable diffusion</title><link>https://meruman.github.io/posts/9.-alien_invasion/</link><pubDate>Wed, 22 Feb 2023 10:58:43 +0100</pubDate><guid>https://meruman.github.io/posts/9.-alien_invasion/</guid><description>Description: I&amp;rsquo;m thrilled to present this game development project, a top-down shooter game made in Unity. The unique aspect of this project is that all the image assets were generated by Stable difussion and the plot was created by ChatGPT. The purpose of this project is to showcase how efficient and productive AI tools can be when used in game development.
Concept and Design The game&amp;rsquo;s concept is centered around an alien invasion on a distant planet.</description></item><item><title>Creating a Maze Walking with Genetic Algorithms</title><link>https://meruman.github.io/posts/2.-maze_walkers_blog/</link><pubDate>Wed, 22 Feb 2023 10:58:43 +0100</pubDate><guid>https://meruman.github.io/posts/2.-maze_walkers_blog/</guid><description>Introduction Setting up the population manager script Creating the Population Breeding the Population Fine-tuning the genetic algorithm Updating the Population Conclusion Introduction Genetic algorithms are a powerful tool for finding solutions to complex problems. They work by simulating the process of natural selection, using a combination of mutation and crossover to create a new generation of solutions that is better than the previous generation. In this project, we will use genetic algorithms to create a maze walking solution in Unity.</description></item><item><title>Creating Alien invasion with Stable diffusion</title><link>https://meruman.github.io/posts/9.-alien_invasion_blog/</link><pubDate>Wed, 22 Feb 2023 10:58:43 +0100</pubDate><guid>https://meruman.github.io/posts/9.-alien_invasion_blog/</guid><description>Description: Key Learnings: Tools and Technologies Used: Outcome: Future Improvements: Description: In this project, I created a population manager in Unity using genetic algorithms to navigate a maze. The project involved setting up a population of bots, breeding them, and evaluating their fitness in order to evolve a population that can successfully navigate a maze.
Key Learnings: Creating a population manager in Unity using genetic algorithms Implementing fitness functions in genetic algorithms Managing data structures using lists in C# Applying good coding practices, such as commenting and using informative variable names Testing and experimenting with different parameters to fine-tune the genetic algorithm and improve the quality of the solutions it generates.</description></item><item><title>Creating movement for bots with genetic algorithms</title><link>https://meruman.github.io/posts/4.-movement_with_genes_blog/</link><pubDate>Wed, 22 Feb 2023 10:58:43 +0100</pubDate><guid>https://meruman.github.io/posts/4.-movement_with_genes_blog/</guid><description>Introduction Genetic Algorithms and their Applications Creating a population of bots using genetic algorithms Setting up the population manager Using distance as fitness function Conclusion Introduction The field of artificial intelligence has been rapidly evolving, with new technologies and algorithms being developed every day. In the world of game development, creating bots that can move effectively and adapt to different scenarios can be a challenging task. Genetic algorithms offer a powerful solution to this problem by using evolutionary principles to train bots to perform specific tasks.</description></item><item><title>Creating pong enemy AI</title><link>https://meruman.github.io/posts/5.-pong_with_ann_blog/</link><pubDate>Wed, 22 Feb 2023 10:58:43 +0100</pubDate><guid>https://meruman.github.io/posts/5.-pong_with_ann_blog/</guid><description>Description: Key Learnings: Tools and Technologies Used: Outcome: Future Improvements: Description: In this project, I created a population manager in Unity using genetic algorithms to navigate a maze. The project involved setting up a population of bots, breeding them, and evaluating their fitness in order to evolve a population that can successfully navigate a maze.
Key Learnings: Creating a population manager in Unity using genetic algorithms Implementing fitness functions in genetic algorithms Managing data structures using lists in C# Applying good coding practices, such as commenting and using informative variable names Testing and experimenting with different parameters to fine-tune the genetic algorithm and improve the quality of the solutions it generates.</description></item><item><title>Genetic Algorithm Flappy Bird Game</title><link>https://meruman.github.io/posts/3.-flappy_birds/</link><pubDate>Wed, 22 Feb 2023 10:58:43 +0100</pubDate><guid>https://meruman.github.io/posts/3.-flappy_birds/</guid><description>Description: This project is a 2D game inspired by Flappy Bird, where the player controls a bird to navigate through obstacles. However, instead of controlling the bird manually, the game uses genetic algorithms to train the birds to navigate through the obstacles on their own. Each bird has its own gene sequence, and the birds that get the farthest through the obstacle course are considered the fittest and breed together.</description></item><item><title>Genetic Algorithms in Unity: A Flappy Bird-Inspired Game</title><link>https://meruman.github.io/posts/3.-flappy_birds_blog/</link><pubDate>Wed, 22 Feb 2023 10:58:43 +0100</pubDate><guid>https://meruman.github.io/posts/3.-flappy_birds_blog/</guid><description>Introduction What are Genetic Algorithms? Setting up the Obstacle Course Using 2D Colliders and Raycasting in Unity Creating the Fitness Function Debugging Tools in Unity Object-Oriented Programming in Unity Conclusion Introduction In this blog, we will explore how to use genetic algorithms to train a bird to navigate through an obstacle course without crashing into walls. We will use Unity to create a 2D game inspired by Flappy Birds.</description></item><item><title>Maze Walking with Genetic Algorithms in Unity</title><link>https://meruman.github.io/posts/2.-maze_walkers/</link><pubDate>Wed, 22 Feb 2023 10:58:43 +0100</pubDate><guid>https://meruman.github.io/posts/2.-maze_walkers/</guid><description>Description: In this project, I created a population manager in Unity using genetic algorithms to navigate a maze. The project involved setting up a population of bots, breeding them, and evaluating their fitness in order to create a population that can successfully navigate a maze.
Key Learnings: Creating a population manager in Unity using genetic algorithms Implementing fitness functions in genetic algorithms Managing data structures using lists in C# Applying good coding practices.</description></item><item><title>Movement with Genetic algorithms in unity</title><link>https://meruman.github.io/posts/4.-movement_with_genes/</link><pubDate>Wed, 22 Feb 2023 10:58:43 +0100</pubDate><guid>https://meruman.github.io/posts/4.-movement_with_genes/</guid><description>Description: In this project, I created a genetic algorithm to train bots to survive on a long, narrow beam in a Unity game environment. The algorithm used a fitness function based on the distance traveled by each bot to encourage them to move along the platform rather than just jumping up and down or standing still. The project also included the creation of a population manager to handle the selection and breeding of new solutions.</description></item><item><title>Pong ANN in Unity</title><link>https://meruman.github.io/posts/5.-pong_with_ann/</link><pubDate>Wed, 22 Feb 2023 10:58:43 +0100</pubDate><guid>https://meruman.github.io/posts/5.-pong_with_ann/</guid><description>Description: For this project, I developed a Unity Pong game where a human player can play against an artificial pong paddle that is trained with an artificial neural network. The game involves bouncing a ball back and forth between two paddles, and the objective is to score points by getting the ball past the opponent&amp;rsquo;s paddle. The artificial paddle is able to learn and improve its performance over time, making it a challenging opponent for players to face.</description></item></channel></rss>